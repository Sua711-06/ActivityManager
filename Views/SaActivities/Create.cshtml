@model ActivityManager.Models.SaActivity

@{
    ViewData["Title"] = "Create";
}

<h1>Create New Activity</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" class="row gy-3">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Location" class="control-label"></label>
                <input asp-for="Location" class="form-control" />
                <span asp-validation-for="Location" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="CategoryId" class="control-label"></label>
                <div class="col">
                    <select asp-for="CategoryId" id="CategoryId" class ="form-control" asp-items="ViewBag.CategoryId"></select>
                    <button id="addCategoryBtn" type="button" class="btn btn-outline-primary mt-2">Add New Category</button>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
            <div>
                <a class="btn btn-secondary" asp-controller="Home" asp-action="Index">Back to List</a>
            </div>
        </form>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="categoryForm">
        <div class="modal-header">
          <h5 class="modal-title" id="categoryModalLabel">Add Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            @* Anti-forgery token required for AJAX POST *@
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label for="categoryName" class="form-label">Name</label>
                <input id="categoryName" name="Name" class="form-control" required />
                <div class="invalid-feedback" id="categoryNameError"></div>
            </div>
            <div class="mb-3">
                <label for="categoryColor" class="form-label">Color (RGB)</label>
                <input id="categoryColor" name="Color" type="color" class="form-control form-control-color" value="#ff0000" />
                <div class="form-text">Pick a color; it will be stored as separate R, G, B values.</div>
            </div>
            <div id="categoryFormErrors" class="text-danger"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Category</button>
        </div>
      </form>
    </div>
  </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        (function () {
            // show modal
            $('#addCategoryBtn').on('click', function (e) {
                e.preventDefault();
                // reset previous errors
                $('#categoryFormErrors').text('');
                $('#categoryNameError').text('').removeClass('d-block');
                $('#categoryName').removeClass('is-invalid');
                $('#categoryName').val('');
                $('#categoryColor').val('#ff0000');
                var modalEl = document.getElementById('categoryModal');
                var modal = new bootstrap.Modal(modalEl);
                modal.show();
            });

            // handle submit via AJAX to CreateAjax action
            $('#categoryForm').on('submit', function (e) {
                e.preventDefault();

                var name = $('#categoryName').val();
                var color = $('#categoryColor').val(); // #RRGGBB
                var r = parseInt(color.substr(1, 2), 16);
                var g = parseInt(color.substr(3, 2), 16);
                var b = parseInt(color.substr(5, 2), 16);
                var token = $('input[name="__RequestVerificationToken"]', this).val();

                // simple client-side validation
                if (!name || name.trim() === '') {
                    $('#categoryNameError').text('Name is required').addClass('d-block');
                    $('#categoryName').addClass('is-invalid');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("CreateAjax", "Categories")',
                    type: 'POST',
                    data: {
                        Name: name,
                        R: r,
                        G: g,
                        B: b,
                        __RequestVerificationToken: token
                    },
                    success: function (res) {
                        if (res && res.success) {
                            // append new option and select it
                            var option = $('<option>').val(res.id).text(res.name);
                            // optional: attach color as data attributes for later use
                            option.attr('data-r', res.r).attr('data-g', res.g).attr('data-b', res.b);
                            $('#CategoryId').append(option);
                            $('#CategoryId').val(res.id);
                            // close modal
                            var modalEl = document.getElementById('categoryModal');
                            var modal = bootstrap.Modal.getInstance(modalEl);
                            modal.hide();
                        } else {
                            $('#categoryFormErrors').text('Unexpected response from server.');
                        }
                    },
                    error: function (xhr) {
                        // show validation errors returned from server
                        $('#categoryFormErrors').text('');
                        if (xhr && xhr.responseJSON) {
                            var json = xhr.responseJSON;
                            if (json.errors) {
                                var messages = [];
                                for (var key in json.errors) {
                                    if (json.errors.hasOwnProperty(key)) {
                                        messages = messages.concat(json.errors[key]);
                                    }
                                }
                                $('#categoryFormErrors').html(messages.join('<br/>'));
                            } else if (json && json.message) {
                                $('#categoryFormErrors').text(json.message);
                            } else {
                                $('#categoryFormErrors').text('Error saving category.');
                            }
                        } else {
                            $('#categoryFormErrors').text('Error saving category.');
                        }
                    }
                });
            });
        })();
    </script>
}
