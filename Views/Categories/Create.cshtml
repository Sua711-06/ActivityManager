@model ActivityManager.Models.Category

@{
    ViewData["Title"] = "Create";
}

<h1>Create New Category</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" class="row gy-3">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input id="colorPicker" type="color" class="form-control form-control-color p-0" style="width:3rem;height:2.25rem;" />
                <div class="d-flex gap-2">
                    <div>
                        <label asp-for="R" class="visually-hidden">R</label>
                        <input asp-for="R" class="form-control rgb-input" type="hidden" />
                        <span asp-validation-for="R" class="text-danger"></span>
                    </div>
                    <div>
                        <label asp-for="G" class="visually-hidden">G</label>
                        <input asp-for="G" class="form-control rgb-input" type="hidden" />
                        <span asp-validation-for="G" class="text-danger"></span>
                    </div>
                    <div>
                        <label asp-for="B" class="visually-hidden">B</label>
                        <input asp-for="B" class="form-control rgb-input" type="hidden" />
                        <span asp-validation-for="B" class="text-danger"></span>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
            <div>
                <a class="btn btn-secondary" asp-action="Index">Back to List</a>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Utility: convert three 0-255 values to hex "#rrggbb"
        function rgbToHex(r, g, b) {
            const toHex = (n) => {
                const v = Math.max(0, Math.min(255, Number(n) || 0));
                return v.toString(16).padStart(2, '0');
            };
            return '#' + toHex(r) + toHex(g) + toHex(b);
        }

        // Utility: convert "#rrggbb" -> {r,g,b} or null
        function hexToRgb(hex) {
            if (!hex) return null;
            const m = hex.replace('#', '');
            if (m.length !== 6) return null;
            return {
                r: parseInt(m.substring(0, 2), 16),
                g: parseInt(m.substring(2, 4), 16),
                b: parseInt(m.substring(4, 6), 16)
            };
        }

        document.addEventListener('DOMContentLoaded', function () {
            const colorPicker = document.getElementById('colorPicker');
            const rInput = document.getElementById('R');
            const gInput = document.getElementById('G');
            const bInput = document.getElementById('B');
            const rgbInputs = Array.from(document.querySelectorAll('.rgb-input'));

            function setPickerFromRgb() {
                const r = parseInt(rInput.value, 10);
                const g = parseInt(gInput.value, 10);
                const b = parseInt(bInput.value, 10);
                colorPicker.value = rgbToHex(
                    Number.isNaN(r) ? 0 : r,
                    Number.isNaN(g) ? 0 : g,
                    Number.isNaN(b) ? 0 : b
                );
            }

            function setRgbFromPicker(hex) {
                const rgb = hexToRgb(hex);
                if (!rgb) return;
                rInput.value = rgb.r;
                gInput.value = rgb.g;
                bInput.value = rgb.b;
            }

            // Sync: color picker -> RGB inputs
            colorPicker.addEventListener('input', function () {
                setRgbFromPicker(colorPicker.value);
            });

            // Sync: RGB inputs -> color picker
            rgbInputs.forEach(function (inp) {
                inp.addEventListener('input', function () {
                    // clamp values and update picker
                    const v = Math.max(0, Math.min(255, Number(inp.value) || 0));
                    inp.value = v;
                    setPickerFromRgb();
                });
            });

            // Initialize color picker from model R/G/B if present, otherwise compute from picker default
            const initialRgb = {
                r: Number(rInput.value) || 0,
                g: Number(gInput.value) || 0,
                b: Number(bInput.value) || 0
            };
            colorPicker.value = rgbToHex(initialRgb.r, initialRgb.g, initialRgb.b);
        });
    </script>
}
